<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd">

	<context:component-scan base-package="com.inmaytide.framework" />
	
	<aop:aspectj-autoproxy proxy-target-class="true" />
	
<!-- 	<bean id="greetingProxy" class="org.springframework.aop.framework.ProxyFactoryBean"> -->
<!-- 		<property name="interfaces"> -->
<!-- 			<list> -->
<!-- 				<value>com.inmaytide.framework.aop.Greeting</value> -->
<!-- 				<value>com.inmaytide.framework.aop.springdemo.Apology</value> -->
<!-- 			</list> -->
<!-- 		</property> -->
<!-- 		<property name="target" ref="greetingImpl" /> -->
<!-- 		<property name="interceptorNames"> -->
<!-- 			<list> -->
<!-- 				<value>greetingAroundAdvice</value> -->
<!-- 				<value>greetingThrowAdvice</value> -->
<!-- 				<value>greetingIntroAdvice</value> -->
<!-- 			</list> -->
<!-- 		</property> -->
<!-- 		<property name="proxyTargetClass" value="true"/> -->
<!-- 	</bean> -->
	
		<!-- Spring AOP 切面 -->
		<!-- 配置一个切面 -->
 		<!-- <bean id="greetingAdvisor" class="org.springframework.aop.support.RegexpMethodPointcutAdvisor"> -->
			<!-- 增强 -->
			<!-- <property name="advice" ref="greetingAroundAdvice"/> -->
			<!-- 切点（正则表达式）个人理解就是过滤方法的规则吧 -->
			<!-- <property name="pattern" value="com.inmaytide.framework.aop.GreetingImpl.good.*" /> --> 
		<!-- </bean> -->
		<!-- 代理 -->
<!-- 	<bean id="greetingProxy" class="org.springframework.aop.framework.ProxyFactoryBean"> -->
<!-- 		<property name="target" ref="greetingImpl"/> 目标类（被代理的对象） -->
<!-- 		<property name="interceptorNames" value="greetingAdvisor"/> -->
 			<!-- 代理目标类， 强制代理类不考虑代理接口， 应该就是用CGLib方式 -->
<!-- 		<property name="proxyTargetClass" value="true" /> -->
	<!-- </bean> -->
	
	<!-- Spring 自动代理（扫描Bean名称） -->
	<!-- <bean class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator"> -->
		<!-- 只为后缀为Impl的Bean生成代理 -->
		<!-- <property name="beanNames" value="*Impl"/> -->
		<!-- 增强 -->
		<!-- <property name="interceptorNames" value="greetingAroundAdvice" /> -->
		<!-- 是否自动对代理生成策略优化（默认为false） -->
		<!-- 就是如果该类有接口就代理接口（JDK动态代理）|| 没有接口就代理类（CGLib动态代理） -->
		<!-- <property name="optimize" value="true" /> -->
	<!-- </bean> -->
	
	<!-- Spring 自动代理（扫描切面配置） -->
<!-- 	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"> -->
<!-- 		<property name="optimize" value="true" /> -->
<!-- 	</bean> -->
</beans>
